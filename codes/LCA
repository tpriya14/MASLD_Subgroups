# Latent Class Analysis for MASLD Biobank Data (Cohort 1A)
# =============================================
# This script performs Latent Class Analysis (LCA) on Metabolic dysfunctionâ€“Associated Steatotic Liver Disease (MASLD) biobank data
# to identify latent clusters based on demographic and clinical variables. The analysis is conducted on both
# the full dataset (100%) and a 75% training subset, with model performance evaluated using AIC, BIC, SABIC,
# entropy, and likelihood ratio tests. Results are saved as publication-ready tables and datasets.

# Author: [Tahmina Sultana Priya]

# Load Required Packages
# ----------------------
library(data.table)       # Efficient data handling
library(dplyr)            # Data manipulation
library(tidyr)            # Data tidying
library(purrr)            # Functional programming
library(ggplot2)          # Visualization
library(poLCA)            # Latent Class Analysis
library(MASS)             # Statistical functions
library(olsrr)            # Stepwise regression
library(table1)           # Summary tables
library(tidyLPA)          # Tidy Latent Profile Analysis

# Set Working Directory
# ---------------------
# Note: Update this path to your local directory or use relative paths for portability.
setwd("/MAYO_BIOBANK/")

# Load Data
# ---------
# Load pre-processed dataset with baseline demographic and clinical variables.
final_all <- read.delim("T_MAYO_BIOBNAK_Pre_Process_Case_CTRL_POOL_T16256_clinical_info_05_28.txt", 
                        sep = "\t", header = TRUE)

# Data Preparation
# ----------------
# Remove unnecessary columns and filter for MASLD cases.
feature <- final_all[, -c(11:34, 35, 36, 38, 40, 42, 44, 46, 48, 50, 51, 52, 53, 54, 56, 57, 58, 
                          62, 65, 68, 71, 74:78, 93, 98, 103, 108)]
LCA_MASLD_data <- feature[feature$MASLD == 1, ]
selected_data_100 <- na.omit(LCA_MASLD_data)  # Remove rows with missing values

# Select variables for LCA and convert character columns to factors.
LCA_data <- selected_data_100[, -c(1:5, 7:29, 44, 48, 49, 51, 61:65)]
character_columns <- sapply(LCA_data, is.character)
LCA_data[, character_columns] <- lapply(LCA_data[, character_columns], as.factor)

# Set Seed for Reproducibility
# ----------------------------
set.seed(5055)  # Ensures consistent results across runs

# Split Data into Training (75%) and Test (25%) Sets
# --------------------------------------------------
test_index <- sample(1:nrow(selected_data_100), nrow(selected_data_100) * 0.25)
LCA_MASLD_data_75 <- selected_data_100[-test_index, ]

# Prepare Control Data (MASLD == 0) for Feature Selection
# -------------------------------------------------------
LCA_CTRL_data <- feature[feature$MASLD == 0, ]
selected_data_ctrl <- LCA_CTRL_data[, -c(1:5, 7:29, 44, 48, 49, 51, 61:65)]
selected_data_ctrl <- na.omit(selected_data_ctrl)

# Combine Training and Control Data for Feature Selection
# -------------------------------------------------------
feature_all1 <- rbind(LCA_MASLD_data_75[, names(LCA_data)], selected_data_ctrl)
feature_all1[, character_columns] <- lapply(feature_all1[, character_columns], as.numeric)

# Feature Selection Using Stepwise Regression
# -------------------------------------------
# Note: Stepwise regression is used here, but consider justifying or exploring alternatives (e.g., LASSO)
# for robustness in the manuscript.
model <- glm(MASLD ~ ., data = feature_all1)
step_both <- stepAIC(model, direction = "both")
summary(step_both)

# Define Variables for LCA
# ------------------------
# Selected based on stepwise regression results; justification should be provided in the manuscript.
vari_lca <- c("PATIENT_GENDER_NAME", "Obesity1", "Hyperlipidemia1", "MetS1", "Hypertension1", 
              "ALT_C", "AST_C", "BMI_C", "HDL_C", "Depression1", "Migraine1", "CKD1", "ALP_C")

# Prepare LCA Data for Full Dataset (100%)
# ----------------------------------------
dat_lca_100 <- LCA_data[, vari_lca]

# Latent Class Analysis (LCA) Model Fitting
# -----------------------------------------
# Define LCA formula
f_lca <- as.formula(paste0("cbind(", paste(vari_lca, collapse = ", "), ") ~ 1"))

# Fit LCA models with 1 to 10 classes
n_start <- 1
n_end <- 10
out_path <- "/result/"
for (i in n_start:n_end) {
  mi_start <- poLCA(f_lca, data = dat_lca_100, nclass = i, maxiter = 1000, nrep = 30, 
                    graph = FALSE, calc.se = TRUE, verbose = FALSE)
  vprobs.start <- poLCA.reorder(mi_start$probs.start, order(mi_start$P, decreasing = TRUE))
  mi <- poLCA(f_lca, data = dat_lca_100, nclass = i, maxiter = 1000, 
              probs.start = vprobs.start, graph = FALSE, calc.se = TRUE, verbose = FALSE)
  save(mi_start, mi, file = paste0(out_path, "lca_m", i, ".RData"))
}

# Save LCA data for reproducibility
save(dat_lca_100, file = paste0(out_path, "dat_lca_100.RData"))

# Evaluate LCA Model Performance
# ------------------------------
res_lca <- data.table()
for (j in n_start:n_end) {
  load(paste0(out_path, "lca_m", j, ".RData"))
  prop <- table(mi$predclass) / mi$Nobs * 100
  pre_prop <- mi$P * 100
  val_post <- apply(mi$posterior, 1, max)
  sum_post <- summary(val_post)
  
  mean_post <- if (j == 1) 1 else {
    dat_post <- data.table(posterior = val_post, class = mi$predclass)
    dat_post[, mean(posterior), by = "class"]$V1
  }
  
  nadj <- (mi$Nobs + 2) / 24
  sabic <- -2 * mi$llik + mi$npar * log(nadj)
  
  entropy <- function(p) sum(-p * log(p))
  error_prior <- entropy(mi$P)
  error_post <- mean(apply(mi$posterior, 1, entropy), na.rm = TRUE)
  entropy_val <- round(((error_prior - error_post) / error_prior), 3)
  
  res_j <- data.table(
    n.class = j, sample.size = mi$Nobs, n.param = mi$npar, loglike = mi$llik,
    AIC = mi$aic, BIC = mi$bic, SABIC = sabic, entropy = entropy_val,
    min.post = sum_post[1], median.post = sum_post[3], mean.post = sum_post[4],
    max.post = sum_post[6], mean.per.post = paste(round(mean_post, 2), collapse = "|"),
    min.per.post = min(mean_post), pre.prop = paste(round(pre_prop, 2), collapse = "|"),
    min.preprop = min(pre_prop), class.prop = paste(round(prop, 2), collapse = "|"),
    min.prop = min(prop)
  )
  res_lca <- rbind(res_lca, res_j)
}

# Calculate p-values for Likelihood Ratio Tests (LRT)
for (n in 2:n_end) {
  plrt <- calc_lrt(n = res_lca$sample.size[n], null_ll = res_lca$loglike[n-1], 
                   null_param = res_lca$n.param[n-1], null_classes = res_lca$n.class[n-1], 
                   alt_ll = res_lca$loglike[n], alt_param = res_lca$n.param[n], 
                   alt_classes = res_lca$n.class[n])[4]
  res_lca$p_lrt[n] <- plrt
}

# Save model performance results
setwd("/MASLD_LCA_FOLD/MAYO_BIOBANK/Journal_Final_Pic")
write.table(res_lca, "res_lca_100.csv", sep = "\t", row.names = FALSE, quote = FALSE)

# Fit Final LCA Model with 5 Classes
# ----------------------------------
mi_start <- poLCA(f_lca, data = dat_lca_100, nclass = 5, maxiter = 1000, nrep = 30, 
                  graph = FALSE, calc.se = TRUE, verbose = FALSE)
vprobs.start <- poLCA.reorder(mi_start$probs.start, order(mi_start$P, decreasing = TRUE))
lc51 <- poLCA(f_lca, data = dat_lca_100, nclass = 5, maxiter = 1000, 
              probs.start = vprobs.start, graph = FALSE, calc.se = TRUE, verbose = FALSE)

# Assign latent class clusters
selected_data_100$LatentClassCluster <- lc51$predclass

# Prepare Data for Summary Table
# ------------------------------
selected_data_100$BUN <- as.numeric(selected_data_100$BUN)
selected_data_100$Fibrosis <- as.factor(selected_data_100$Fibrosis)
selected_data_100$Cirrhosis <- as.factor(selected_data_100$Cirrhosis)
selected_data_100$Transplant <- as.factor(selected_data_100$Transplant)
selected_data_100$Steatohepatitis <- as.factor(selected_data_100$Steatohepatitis)
selected_data_100$Hepatocellular <- as.factor(selected_data_100$Hepatocellular)

# Define custom rendering for categorical variables
my.render.cat <- function(x) {
  c("", sapply(stats.default(x), function(y) with(y, sprintf("%0.1f", PCT))))
}

# Create publication-ready summary table
table_column <- selected_data_100[, -c(1:5, 7, 21, 23, 25, 27, 29)]
x <- table1(~ . | LatentClassCluster, data = table_column, overall = TRUE, 
            render.categorical = my.render.cat, topclass = "Rtable1-zebra")

# Save summary table and clustered data
tab1_df <- as.data.frame(x)
write.table(tab1_df, "Bio_After_LCA_100.csv", sep = "\t", row.names = FALSE, quote = FALSE)
write.table(selected_data_100, "T100_5_Tapestry_After_LCA_T2043_clinical_info_06_11.csv", 
            sep = "\t", row.names = FALSE, quote = FALSE)

# Repeat Analysis for 75% Training Dataset
# ----------------------------------------
dat_lca_75 <- LCA_MASLD_data_75[, vari_lca]

# Fit and evaluate LCA models for 75% dataset (similar to above, omitted for brevity)
# [Follow the same steps as for the 100% dataset, adjusting file names and variables as needed]

# Conclusion
# ----------
# This script identifies latent clusters in MASLD biobank data using LCA, with results evaluated across
# multiple fit criteria. The code is designed for reproducibility and produces publication-ready outputs.
